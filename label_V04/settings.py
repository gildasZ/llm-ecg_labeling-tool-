"""
Django settings for label_V04 project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import dj_database_url
from pathlib import Path
import os

# ---------------------------------
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Define the URL prefix for media files (how they appear in browser URLs)
MEDIA_URL = '/media/'
# Define the absolute filesystem path to the directory where user uploads will be stored.
# It's common practice to create a 'media' directory at the project root (same level as manage.py)
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # <--- ADD THIS LINE

MAX_UPLOAD_SIZE_BYTES = 50 * 1024 * 1024 # 50MB in bytes
DATA_UPLOAD_MAX_MEMORY_SIZE = 10*MAX_UPLOAD_SIZE_BYTES # Or slightly larger
FILE_UPLOAD_MAX_MEMORY_SIZE = MAX_UPLOAD_SIZE_BYTES # Or slightly larger
DATA_UPLOAD_MAX_NUMBER_FILES = 1000 # Allow up to 1000 files in one upload

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Read SECRET_KEY from environment variable, with a default for local non-Docker use
SECRET_KEY = os.environ.get('SECRET_KEY', 'Provide a default key') # Provide a default

# SECURITY WARNING: don't run with debug turned on in production! <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# Read DEBUG from environment variable, default to True for local non-Docker use
DEBUG = os.environ.get('DEBUG', '1') == '1' # Compare with '1' to get a boolean (DEBUG = '1' yields True, and '0' yields False)

allowed_hosts_str = os.environ.get('DJANGO_ALLOWED_HOSTS', 'localhost 127.0.0.1 [::1]')
ALLOWED_HOSTS = allowed_hosts_str.split(' ')

# Wildcard
# Read CSRF_TRUSTED_ORIGINS from environment variable if needed, split by spaces
# Default to your ngrok example if not set
csrf_origins_str = os.environ.get('DJANGO_CSRF_TRUSTED_ORIGINS', 'https://*.ngrok-free.app')
CSRF_TRUSTED_ORIGINS = csrf_origins_str.split(' ') if csrf_origins_str else []

LOGIN_URL = '/login/'
# LOGIN_REDIRECT_URL = '/'
LOGIN_REDIRECT_URL = '/welcome/'  # Redirect to the welcome view after successful login
LOGOUT_URL = '/logout/'
REGISTER_URL = '/register/'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    # 'django.contrib.staticfiles',
    'django_plotly_dash.apps.DjangoPlotlyDashConfig',
    'home',
    # 'home.apps.HomeConfig', # Adding the 'home' app -- Try to use 'home' only
    'channels',
    'channels_redis',
    'dpd_static_support',
    # 'dpd_components',
    # 'channels_redis', # channels > 4 automatically includes redis support
    'whitenoise.runserver_nostatic', # Add this for whitenoise dev support
    'django.contrib.staticfiles', # Ensure this is AFTER whitenoise
]

ASGI_APPLICATION = 'label_V04.asgi.application'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Added from https://django-plotly-dash.readthedocs.io/en/latest/configuration.html#configuration
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_plotly_dash.middleware.BaseMiddleware', # Added, consider removing if any issues (added from https://django-plotly-dash.readthedocs.io/en/latest/installation.html)
    'django_plotly_dash.middleware.ExternalRedirectionMiddleware', # Added from https://django-plotly-dash.readthedocs.io/en/latest/configuration.html#configuration
    'home.middleware.AutoLogoutMiddleware',  # Add this line
]

ROOT_URLCONF = 'label_V04.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'label_V04.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases


''' 
This was the default database being used. 
Don't forget to run these 2 oommand lines if you change the database:
     python manage.py makemigrations
     python manage.py migrate
'''

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

''' 
Here is a PostgreSQL database configuration.
Don't forget to run these 2 oommand lines if you change the database:
     python manage.py makemigrations
     python manage.py migrate
'''

# Database
# Use environment variables set in docker-compose.yml or system environment
DB_ENGINE = os.environ.get('DB_ENGINE', 'django.db.backends.postgresql')
DB_NAME = os.environ.get('DB_NAME', 'db_label_v04')
DB_USER = os.environ.get('DB_USER', 'postgres')
DB_PASSWORD = os.environ.get('DB_PASSWORD', '12345') # Default local password
DB_HOST = os.environ.get('DB_HOST', 'localhost') # Default to localhost for local dev
DB_PORT = os.environ.get('DB_PORT', '5432')       # Default to 5432 for local dev

DATABASE_URL = os.environ.get('DATABASE_URL', f'postgres://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}')
DATABASES = {'default': dj_database_url.parse(DATABASE_URL)}

SESSION_ENGINE = 'django.contrib.sessions.backends.db'
# Ensure the session cookie is not persistent
SESSION_COOKIE_SECURE = False  # Set to True if using HTTPS
SESSION_COOKIE_HTTPONLY = True
SESSION_SAVE_EVERY_REQUEST = True  # Optional: Save the session to the database on every request

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

CRISPY_TEMPLATE_PACK = 'bootstap4'

# Channels Layer configuration using environment variables
REDIS_HOST = os.environ.get('REDIS_HOST', 'localhost') # Default to localhost i.e. '127.0.0.1'
REDIS_PORT = int(os.environ.get('REDIS_PORT', 6379))   # Default to 6379, ensure int
REDIS_DB = int(os.environ.get('REDIS_DB', 0))         # Default to 0, ensure int

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            # Use the environment variables read above
            'hosts': [(REDIS_HOST, REDIS_PORT)],
        },
    },
}

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'django_plotly_dash.finders.DashAssetFinder',
    'django_plotly_dash.finders.DashComponentFinder',
    'django_plotly_dash.finders.DashAppDirectoryFinder',
]

PLOTLY_COMPONENTS = [
    # 'dash_core_components',  # This is no longer needed in newer versions of Dash
    # 'dash_html_components',  # This is no longer needed in newer versions of Dash
    # 'dash_renderer', # This is no longer needed in newer versions of Dash

    # django-plotly-dash components
    'dpd_components',
    # static support if serving local assets
    'dpd_static_support',

    # Other components, as needed
    'dash_bootstrap_components',
]

PLOTLY_DASH = { # Added from https://django-plotly-dash.readthedocs.io/en/latest/configuration.html#configuration

    # Route used for the message pipe websocket connection
    "ws_route" :   "dpd/ws/channel",

    # Route used for direct http insertion of pipe messages
    "http_route" : "dpd/views",

    # Flag controlling existince of http poke endpoint
    "http_poke_enabled" : True,

    # Insert data for the demo when migrating
    "insert_demo_migrations" : False,

    # Timeout for caching of initial arguments in seconds
    "cache_timeout_initial_arguments": 60,

    # Name of view wrapping function
    "view_decorator": None,

    # Flag to control location of initial argument storage
    "cache_arguments": True,

    # Flag controlling local serving of assets
    "serve_locally": False,
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATICFILES_LOCATION = 'static'
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_collected') 
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'label_V04/static')
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

X_FRAME_OPTIONS = 'SAMEORIGIN' # Added from https://django-plotly-dash.readthedocs.io/en/latest/installation.html

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'DEBUG',      # Allow DEBUG records
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'asgi': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'home': {
            'handlers': ['console'],
            # 'level': 'DEBUG',  # Will always show the content in the terminal
            'level': 'INFO',  # One level higher than DEBUG
            # 'level': 'WARNING',  # Only show warnings and above for 'home' logger
            'propagate': False,    # Avoid duplicate prints via ancestor loggers
        },
        'channels': {
            'handlers': ['console'],
            'level': 'DEBUG',  # Increase verbosity for channels
        }
    },
}
